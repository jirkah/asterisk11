#!/usr/bin/make -f
# -*- mode: makefile; coding: utf-8 -*-

ASTVER=$(shell echo *.tar.gz | sed -r 's/.*_(.*)\+dfsg.*$$/\1/')
DEB_TAR_SRCDIR := asterisk-$(ASTVER)
DEB_TARBALL := asterisk_$(ASTVER)+dfsg.orig.tar.gz

include /usr/share/cdbs/1/rules/debhelper.mk
include /usr/share/cdbs/1/rules/tarball.mk
include /usr/share/cdbs/1/rules/patchsys-quilt.mk
DEB_PATCHDIRS = $(CURDIR)/patches
include /usr/share/cdbs/1/class/autotools.mk
#
BUILD_TREE=$(CURDIR)/build-tree/$(DEB_TAR_SRCDIR)
# TODO: find a solution to avoid error message:
# dpkg-shlibdeps: error: no dependency information found for debian/tmp/usr/lib/libasteriskssl.so.1
# (used by debian/asterisk/usr/sbin/asterisk).

DEB_SHLIBDEPS_INCLUDE := $(CURDIR)/debian/tmp/usr/lib
DEB_DH_SHLIBDEPS_ARGS_ALL += -u--ignore-missing-info

DEB_MAKE_INVOKE = $(DEB_MAKE_ENVVARS) $(MAKE) -C $(DEB_BUILDDIR)

# uncomment the next 2 lines to create a "debug" version of asterisk
#MENUSELECT_EXTRA_ARGS := --enable DONT_OPTIMIZE
#MENUSELECT_EXTRA_ARGS += --enable DEBUG_THREADS
# ...and the next line to be able to use the asterisk test framework
#MENUSELECT_EXTRA_ARGS += --enable TEST_FRAMEWORK

# Asterisk needs
export PROC := $(shell dpkg-architecture -qDEB_BUILD_GNU_CPU)
# show full gcc arguments instead of [CC] and [LD]
DEB_MAKE_INVOKE += -C $(BUILD_TREE)
DEB_MAKE_INVOKE += NOISY_BUILD=yes
# Force music files selection:
DEB_MAKE_INVOKE += MENUSELECT_MOH= \
  ASTDATADIR=/usr/share/asterisk \
  ASTVARRUNDIR=/var/run/asterisk \

# Debian needs
DEB_DH_INSTALLINIT_ARGS = --name asterisk -- defaults 30 70
DEB_CONFIGURE_EXTRA_FLAGS = --with-imap=system --without-h323 --without-misdn --enable-dev-mode
DEB_CONFIGURE_SCRIPT_ENV += $(FETCH_ENV)

# on the system. However it is generally not a good idea to actually
# get remote tarballs at build time. So if nither wget nor fetch
# happen to be installed, the configure script will find a dummy
# fetch script that always returns an error.
DEB_MAKE_ENVVARS = PATH=$$PATH:$(CURDIR)/debian/dummyprogs

configure/asterisk::
	# generate proper menuselect.makeopts
	(cd $(BUILD_TREE); \
		$(FETCH_ENV) $(MAKE) $(BUILDFLAGS) menuselect.makeopts)
	(cd $(BUILD_TREE); \
		menuselect/menuselect \
			--disable-category MENUSELECT_ADDONS \
			--disable-category MENUSELECT_MOH \
			--enable app_meetme \
			$(MENUSELECT_EXTRA_ARGS) \
			menuselect.makeopts \
	)
	# generate changelog
	chmod a+x $(CURDIR)/debian/prepend_chlog.py
	(cd $(BUILD_TREE); \
		QUILT_PATCHES=$(CURDIR)/patches quilt --quiltrc /dev/null applied) \
		| sed -e 's%^%$(CURDIR)/patches/%g' \
		| $(CURDIR)/debian/prepend_chlog.py $(BUILD_TREE)/ChangeLog
	# generate asterisk advertised version
	echo "$(DEB_UPSTREAM_VERSION)" > $(BUILD_TREE)/.version
	# DONE
	touch $(BUILD_TREE)/configure-stamp

build/asterisk:: 
	touch $(BUILD_TREE)/build-stamp

common-install-arch common-install-indep:: common-install-impl
common-install-impl::
	$(DEB_MAKE_ENVVARS) $(MAKE) -C $(BUILD_TREE) DESTDIR=$(CURDIR)/debian/tmp/ install samples

install/asterisk::
	$(DEB_MAKE_ENVVARS) $(MAKE) -C $(BUILD_TREE) DESTDIR=$(CURDIR)/debian/tmp/ install

binary-install/asterisk::
	mkdir -p $(CURDIR)/debian/$(cdbs_curpkg)/usr/share/asterisk/bin
	cp $(CURDIR)/debian/asterisk_fix $(CURDIR)/debian/$(cdbs_curpkg)/usr/share/asterisk/bin/
	chmod +x $(CURDIR)/debian/$(cdbs_curpkg)/usr/share/asterisk/bin/asterisk_fix

binary-install/asterisk::
	rm -f debian/$(cdbs_curpkg)/usr/lib/asterisk/modules/*_mysql*.so
	rm -rf debian/$(cdbs_curpkg)/var/spool/asterisk/voicemail/default
	rm -rf debian/$(cdbs_curpkg)/var/lib/asterisk/sounds/en
	mkdir -p debian/$(cdbs_curpkg)/usr/share/asterisk
	mv debian/tmp/var/lib/asterisk/documentation debian/$(cdbs_curpkg)/usr/share/asterisk/

install/asterisk-doc::
	dh_installexamples -p$(cdbs_curpkg) $(BUILD_TREE)/sample.call
	dh_installexamples -p$(cdbs_curpkg) $(BUILD_TREE)/configs/*
	dh_installexamples -p$(cdbs_curpkg) $(BUILD_TREE)/agi/agi-test.agi
	dh_installexamples -p$(cdbs_curpkg) $(BUILD_TREE)/agi/fastagi-test
	dh_installdocs -p$(cdbs_curpkg) $(BUILD_TREE)/UPGRADE.txt
	dh_installdocs -p$(cdbs_curpkg) $(BUILD_TREE)/CREDITS
	dh_installdocs -p$(cdbs_curpkg) $(BUILD_TREE)/doc/*
	dh_installdocs -p$(cdbs_curpkg) $(BUILD_TREE)/contrib
	dh_installdocs -p$(cdbs_curpkg) $(BUILD_TREE)/images/*.gif
	dh_installdocs -p$(cdbs_curpkg) $(BUILD_TREE)/Zaptel-to-DAHDI.txt

clean::
	rm -f *.cdbs-config_list
